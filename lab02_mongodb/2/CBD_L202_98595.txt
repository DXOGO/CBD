// NMEC: 98595


// 1. Liste todos os documentos da coleção.
 > db.restaurants.find() or db.restaurants.find().pretty() for better visualization


// 2. Apresente os campos restaurant_id, nome, localidade e gastronomia para todos os documentos da coleção.
 > db.restaurants.find({}, {restaurant_id : 1, nome : 1, gastronomia : 1, localidade: 1})


// 3. Apresente os campos restaurant_id, nome, localidade e código postal (zipcode), mas exclua o campo _id de todos os documentos da coleção.
 > db.restaurants.find({}, {_id : 0, restaurant_id : 1, nome : 1, localidade : 1, 'address.zipcode': 1})
 
// 4. Indique o total de restaurantes localizados no Bronx.
> db.restaurants.aggregate([ 
                            { $match : {localidade: 'Bronx'} }, 
                            { $count : "No of Restaurants in the Bronx" }
                          ]) 
 // { "No of Restaurants in the Bronx" : 309 }  (eq = equal to)
	 
	 
// 5. Apresente os primeiros 15 restaurantes localizados no Bronx, ordenados por ordem crescente de nome.
 > db.restaurants.find( { localidade: 'Bronx'} ).limit(15)


// 6. Liste todos os restaurantes que tenham pelo menos um score superior a 85.
 > db.restaurants.find({'grades.score' : {$gt: 85}})
 // gt = greater than


// 7. Encontre os restaurantes que obtiveram uma ou mais pontuações (score) entre [80 e 100].
 > db.restaurants.find({ $and: [
                                {'grades.score' : {$gte: 80} },
                                {'grades.score': {$lte: 100} }
                               ] 
                        })
 // gte = greater than or equal, lte = lesser than or equal


// 8. Indique os restaurantes com latitude inferior a -95,7.
 > db.restaurants.find({ "address.coord.0" : { $lt : -97.5 } })
 // lt = less than


// 9. Indique os restaurantes que não têm gastronomia "American", tiveram uma (ou mais) pontuação superior a 70 e estão numa latitude inferior a -65.
 > db.restaurants.find({  
                           gastronomia : {$ne: "American"}, 
                          'grades.score' : {$gt : 70}, 
                          'address.coord.0': {$lt : -65} 
                        })
 // ne = not equal


// 10. Liste o restaurant_id, o nome, a localidade e gastronomia dos restaurantes cujo nome começam por "Wil".
 > db.restaurants.find({ nome : {$regex: 'Wil*'}}, {_id : 0, restaurant_id : 1, nome : 1, localidade : 1, gastronomia : 1})


// 11. Liste o nome, a localidade e a gastronomia dos restaurantes que pertencem ao Bronx e cuja gastronomia é do tipo "American" ou "Chinese".
 > db.restaurants.find({ localidade : 'Bronx', 
                         $or: [
                                { gastronomia : 'American' },
                                { gastronomia : 'Chinese' }
                              ]
                        }, 
                        { _id : 0, nome : 1, localidade : 1, gastronomia : 1})


// 12. Liste o restaurant_id, o nome, a localidade e a gastronomia dos restaurantes localizados em "Staten Island", "Queens", ou "Brooklyn".
 > db.restaurants.find({ $or: [
                                 {localidade: 'Staten Island' }, 
                                 {localidade: 'Queens' }, 
                                 {localidade: 'Brooklyn' } 
                               ]
                        },
                        { _id : 0, restaurant_id : 1, nome : 1, gastronomia :1, localidade : 1})


// 13. Liste o nome, a localidade, o score e gastronomia dos restaurantes que alcançaram sempre pontuações inferiores ou igual a 3.
 > db.restaurants.find( { 'grades.score' : { $not : {$gt : 3} } },
                        { _id : 0, nome : 1, localidade : 1, 'grades.score' : 1, gastronomia : 1})

 
// 14. Liste o nome e as avaliações dos restaurantes que obtiveram uma avaliação com um grade "A", um score 10 na data "2014-08-11T00: 00: 00Z" (ISODATE).
 > db.restaurants.find( {'grades' : 
                            {'$elemMatch' : 
                                {
                                    grade : 'A', 
                                    score : 10, 
                                    date : ISODate("2014-08-11T00:00:00Z")
                                }
                            }
                        }, 
                        {_id : 0, nome : 1, 'grades.grade' : 1} )


// 15. Liste o restaurant_id, o nome e os score dos restaurantes nos quais a segunda avaliação foi grade "A" e ocorreu em ISODATE "2014-08-11T00: 00: 00Z".
 > db.restaurants.find( {'grades.1.grade' :'A', 'grades.1.date' : ISODate("2014-08-11T00:00:00Z") }, 
                        {_id : 0, restaurant_id : 1, nome : 1, 'grades.score' : 1})


// 16. Liste o restaurant_id, o nome, o endereço (address) e as coordenadas geográficas (coord) dos restaurantes onde o 2º elemento da matriz de coordenadas tem um valor superior a 42 e inferior ou igual a 52.
 > db.restaurants.find( {$and : [
                                    {'address.coord.1' : {$gt : 42}}, 
                                    {'address.coord.1': {$lte : 52} } 
                                ]}, 
                        {_id : 0, restaurant_id : 1,  nome : 1, address : 1} )


// 17. Liste nome, gastronomia e localidade de todos os restaurantes ordenando por ordem crescente da gastronomia e, em segundo, por ordem decrescente de localidade.
 > db.restaurants.find({}, {_id : 0, nome : 1, gastronomia : 1, localidade : 1}).sort({gastronomia : 1, localidade : -1})


// 18. Liste nome, localidade, grade e gastronomia de todos os restaurantes localizados em Brooklyn que não incluem gastronomia "American" e obtiveram uma classificação (grade) "A". Deve apresentá-los por ordem decrescente de gastronomia.
 > db.restaurants.find( {localidade : 'Brooklyn', gastronomia : {$ne : 'American'}, 'grades.grade' : 'A'}, {nome : 1, localidade : 1, 'grades.grade' : 1, gastronomia : 1}).sort({gastronomia : -1})


// 19. Conte o total de restaurante existentes em cada localidade.
 > db.restaurants.aggregate([ {$group : { _id : '$localidade', "n_restaurants" : {$sum : 1} }} ])
                                    //  { "_id" : "Bronx"    , "n_restaurants" :   309      }

// 20. Liste todos os restaurantes cuja média dos score é superior a 30.
 > db.restaurants.aggregate([ 
                              { $addFields : { avg_score :  {$avg : '$grades.score'} } },  $addFields + $avg -> fazer a media de 'grades.score' e guardar em "avg_score"
                              { $match : {avg_score: {$gt : 30} }}                         $match -> devolve restaurants onde avg_score > 30
                           ])


// 21. Indique os restaurantes que têm gastronomia "Portuguese", o somatório de score é superior a 50 e estão numa latitude inferior a -60.
 > db.restaurants.aggregate([ 
                                { $addFields : { total_score :  {$sum : '$grades.score'}}},     // somar todos os grades.score e guardar em "total_score"
                                { $match : {total_score: {$gt: 50}, gastronomia: 'Portuguese', 'address.coord.0': {$lt: -60}}} 
                            ])


// 22. Apresente o nome e o score dos 3 restaurantes com score médio mais elevado.
 > db.restaurants.aggregate([ 
                                {$addFields : {score: {$avg : "$grades.score"} }}, $addFields + $avg -> fazer o score medio do rest
                                {$sort : {score : -1}},                            $sort -> começa pelo score mais elevado
                                {$limit : 3},                                      $limit -> mostra os 3 primeiros
                                {$project : {nome : 1, score : 1, _id : 0} }       $project -> mostrar apenas os campos especificados
                            ])
 

// 23. Apresente o número de gastronomias diferentes na rua "Fifth Avenue"
 > db.restaurants.aggregate([ 
                                {$match : {'address.rua' : 'Fifth Avenue' }},       $match -> ver a rua
                                {$group : {'_id' : '$gastronomia'}},                $group -> cria grupo p cada gastronomia???
                                {$count : "no_gastronomy"}                          $count -> conta os restaurantes de cada gastronomia naquela rua
                            ])
 // { "no_gastronomy" : 4 }


// 24. Conte quantos restaurantes existem por rua e ordene por ordem decrescente
 > db.restaurants.aggregate([ 
                                { $group : { _id : '$address.rua', no_restaurants : {$sum : 1}}},   $group -> para cada rua contar o nº de restaurants
                                { $sort: {no_restaurants: -1}} 
                            ])


// 25. Quantos restaurantes italianos existem em Broadway?
 > db.restaurants.aggregate([
                                { $match: {gastronomia: 'Italian', 'address.rua': 'Broadway'}},     $match -> italianos e em broadway
                                { $count: 'no_restaurants'}                                         $count -> contá-los
                            ])
 // { "no_restaurants" : 6 }


// 26. Indique a localidade com mais restaurantes
 > db.restaurants.aggregate([
                                { $group : { _id : '$localidade', no_restaurants : {$sum : 1}}}     $group -> nº rest p cada localidade 
                                { $sort: {no_restaurants: -1}},                                     $sort -> ordenar pelo q tem mais
                                { $limit: 1}                                                        $limit -> mostrar 1º
                            ])
 // { "_id" : "Manhattan", "no_restaurants" : 1883 }


// 27. Conte quantos restaurantes possuem 'Place' no nome
 > db.restaurants.aggregate([ 
                                { $match: {nome: {$regex: 'Place*'}}},      $match + $regex -> todos os rest com "Place" no nome
                                { $count: 'no_restaurants'}                 $count -> conta o nº de restaurants devolvidos da coisa acima
                            ])
 // { "no_restaurants" : 26 }


// 28. Quantos restaurantes existem por localidade e ordenar por ordem crescente
 > db.restaurants.aggregate([
                                { $group : { _id : '$localidade', no_restaurants : {$sum : 1}}},    $group -> nº de rest por localidade
                                { $sort: {no_restaurants: 1}}                                       $sort -> ordenar por ordem crescente (1)
                            ])


// 29. Liste o nome, a localidade, e gastronomia dos restaurantes da rua de Broadway.
 > db.restaurants.find( {'address.rua' : 'Broadway' }, {_id : 0, nome : 1, localidade : 1, 'address.rua' : 1,  gastronomia : 1} )


// 30. Indique o score médio total de todos os restaurantes
 > db.restaurants.aggregate([ 
                                { $addFields : { avg_score :  {$avg : '$grades.score'}}},       
                                { $group : {_id : null, avg_score : {$avg : '$avg_score'} }} 
                            ])
 // { "_id" : null, "avg_score" : 11.170791988587588 }

